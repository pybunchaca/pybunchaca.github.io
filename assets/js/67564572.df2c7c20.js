"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4332],{3905:(e,r,n)=>{n.r(r),n.d(r,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>d,withMDXComponents:()=>c});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(){return o=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},o.apply(this,arguments)}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),c=function(e){return function(r){var n=d(r.components);return t.createElement(e,o({},r,{components:n}))}},d=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},p=function(e){var r=d(e.components);return t.createElement(u.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(n),p=a,f=c["".concat(i,".").concat(p)]||c[p]||m[p]||o;return n?t.createElement(f,l(l({ref:r},u),{},{components:n})):t.createElement(f,l({ref:r},u))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5189:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var t=n(7462),a=(n(7294),n(3905));const o={},i="Valid Anagram",l={unversionedId:"algorithms-and-data-structures/array-and-string/valid-anagram",id:"algorithms-and-data-structures/array-and-string/valid-anagram",title:"Valid Anagram",description:"Leetcode",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/003-valid-anagram.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/valid-anagram",permalink:"/docs/algorithms-and-data-structures/array-and-string/valid-anagram",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Contains Duplicate",permalink:"/docs/algorithms-and-data-structures/array-and-string/contains-duplicate"}},s={},u=[{value:"Description",id:"description",level:3},{value:"Reason",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],c={toc:u};function d(e){let{components:r,...n}=e;return(0,a.mdx)("wrapper",(0,t.default)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"valid-anagram"},"Valid Anagram"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-anagram/description/"},"Leetcode")),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given two strings ",(0,a.mdx)("inlineCode",{parentName:"p"},"s")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"t"),", return true if ",(0,a.mdx)("inlineCode",{parentName:"p"},"t")," is an anagram of ",(0,a.mdx)("inlineCode",{parentName:"p"},"s"),", and false otherwise."),(0,a.mdx)("p",null,"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,a.mdx)("p",null,"Example 1:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'Input: s = "anagram", t = "nagaram"\nOutput: true\n')),(0,a.mdx)("p",null,"Example 2:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'Input: s = "rat", t = "car"\nOutput: false\n')),(0,a.mdx)("h3",{id:"reason"},"Reason"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Count frequency of all characters in each string and put it into a dict"),(0,a.mdx)("li",{parentName:"ul"},"Loop through each key of frequency dictionary of string ",(0,a.mdx)("inlineCode",{parentName:"li"},"t"),", if the key is not in ",(0,a.mdx)("inlineCode",{parentName:"li"},"s")," freq dict or the values of the key in both dict are different --\x3e return False"),(0,a.mdx)("li",{parentName:"ul"},"Otherwise, return True")),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"\ndef count_freq(s: str):\n    count_freq = dict()\n    for char in s:\n        count_freq[char] = count_freq.get(char, 0) + 1\n    return count_freq\n\ndef is_anagram(self, s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n\n    count_freq_s = count_freq(s)\n    count_freq_t = count_freq(t)\n\n    for key_t in count_freq_t:\n        if key_t not in count_freq_s:\n            return False\n        elif count_freq_t[key_t] != count_freq_s[key_t]:\n            return False\n    return True\n\n")))}d.isMDXComponent=!0}}]);