"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3385],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>c,mdx:()=>h,useMDXComponents:()=>d,withMDXComponents:()=>p});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){return function(t){var n=d(t.components);return r.createElement(e,o({},t,{components:n}))}},d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),c=a,f=p["".concat(i,".").concat(c)]||p[c]||m[c]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4070:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={tags:["array","medium","facebook","amazon","apple"]},i="Product of Array Except Self",l={unversionedId:"algorithms-and-data-structures/array-and-string/product-of-array-except-self",id:"algorithms-and-data-structures/array-and-string/product-of-array-except-self",title:"Product of Array Except Self",description:"Leetcode",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/009-product-of-array-except-self.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/product-of-array-except-self",permalink:"/docs/algorithms-and-data-structures/array-and-string/product-of-array-except-self",draft:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"medium",permalink:"/docs/tags/medium"},{label:"facebook",permalink:"/docs/tags/facebook"},{label:"amazon",permalink:"/docs/tags/amazon"},{label:"apple",permalink:"/docs/tags/apple"}],version:"current",sidebarPosition:9,frontMatter:{tags:["array","medium","facebook","amazon","apple"]},sidebar:"tutorialSidebar",previous:{title:"Remove Duplicates from Sorted Array",permalink:"/docs/algorithms-and-data-structures/array-and-string/remove-duplicates"},next:{title:"3Sum",permalink:"/docs/algorithms-and-data-structures/array-and-string/007-3sum"}},s={},u=[{value:"Description",id:"description",level:3},{value:"Reason:",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.default)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"product-of-array-except-self"},"Product of Array Except Self"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://leetcode.com/problems/product-of-array-except-self/description/"},"Leetcode")),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given an integer array nums, return an array answer such that answer","[i]"," is equal to the product of all the elements of nums except nums","[i]","."),(0,a.mdx)("p",null,"The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."),(0,a.mdx)("p",null,"You must write an algorithm that runs in O(n) time and without using the division operation."),(0,a.mdx)("p",null,"Example 1:"),(0,a.mdx)("p",null,"Input: nums = ","[1,2,3,4]","\nOutput: ","[24,12,8,6]","\nExample 2:"),(0,a.mdx)("p",null,"Input: nums = ","[-1,1,0,-3,3]","\nOutput: ","[0,0,9,0,0]"),(0,a.mdx)("p",null,"Constraints:"),(0,a.mdx)("p",null,"2 <= nums.length <= 105\n-30 <= nums","[i]"," <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."),(0,a.mdx)("p",null,"Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)"),(0,a.mdx)("h3",{id:"reason"},"Reason:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Approach 1:")),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Use two additional list: Left and Right."),(0,a.mdx)("li",{parentName:"ul"},"For a given index ",(0,a.mdx)("inlineCode",{parentName:"li"},"i"),", ",(0,a.mdx)("inlineCode",{parentName:"li"},"Left[i]")," contains the product of all the numbers to the left of ",(0,a.mdx)("inlineCode",{parentName:"li"},"i"),". ",(0,a.mdx)("inlineCode",{parentName:"li"},"Right[i]")," contains the product of all the numbers to the right of ",(0,a.mdx)("inlineCode",{parentName:"li"},"i"),"."),(0,a.mdx)("li",{parentName:"ul"},"Need to loop twice to update both Left and Right."),(0,a.mdx)("li",{parentName:"ul"},"Final loop to take the product of Left and Right")),(0,a.mdx)("ol",{start:2},(0,a.mdx)("li",{parentName:"ol"},"Approach 2: try to solve the problem in O(1) extra space complexity")),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Since the output array does not count as extra space, instead of using two different lists, we use the output array as ",(0,a.mdx)("inlineCode",{parentName:"li"},"Left"),", and another variable ",(0,a.mdx)("inlineCode",{parentName:"li"},"right_product"))),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Approach 1:")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n\n        # The length of the input array\n        length = len(nums)\n\n        # The left and right arrays as described in the algorithm\n        L, R, answer = [0]*length, [0]*length, [0]*length\n\n        # L[i] contains the product of all the elements to the left\n        # Note: for the element at index '0', there are no elements to the left,\n        # so the L[0] would be 1\n        L[0] = 1\n        for i in range(1, length):\n\n            # L[i - 1] already contains the product of elements to the left of 'i - 1'\n            # Simply multiplying it with nums[i - 1] would give the product of all\n            # elements to the left of index 'i'\n            L[i] = nums[i - 1] * L[i - 1]\n\n        # R[i] contains the product of all the elements to the right\n        # Note: for the element at index 'length - 1', there are no elements to the right,\n        # so the R[length - 1] would be 1\n        R[length - 1] = 1\n        for i in reversed(range(length - 1)):\n\n            # R[i + 1] already contains the product of elements to the right of 'i + 1'\n            # Simply multiplying it with nums[i + 1] would give the product of all\n            # elements to the right of index 'i'\n            R[i] = nums[i + 1] * R[i + 1]\n\n        # Constructing the answer array\n        for i in range(length):\n            # For the first element, R[i] would be product except self\n            # For the last element of the array, product except self would be L[i]\n            # Else, multiple product of all elements to the left and to the right\n            answer[i] = L[i] * R[i]\n\n        return answer\n")),(0,a.mdx)("ol",{start:2},(0,a.mdx)("li",{parentName:"ol"},"Approach 2:")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n\n        # The length of the input array\n        length = len(nums)\n\n        answer = [0]*length\n\n        # answer[i] contains the product of all the elements to the left\n        answer[0] = 1\n        for i in range(1, length):\n            answer[i] = nums[i - 1] * answer[i - 1]\n\n        # Constructing the answer array\n        right_product = 1\n        for i in reversed(range(length)):\n            if i != length - 1:\n                right_product *= nums[i + 1]\n            answer[i] = answer[i] * right_product\n        return answer\n")),(0,a.mdx)("p",null,"Simplify the above solution:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n\n        # The length of the input array\n        length = len(nums)\n\n        answer = [0]*length\n\n        # answer[i] contains the product of all the elements to the left\n        answer[0] = 1\n        for i in range(1, length):\n            answer[i] = nums[i - 1] * answer[i - 1]\n\n        # Constructing the answer array\n        right_product = 1\n        for i in reversed(range(length)):\n            answer[i] = answer[i] * right_product\n            right_product *= nums[i]\n        return answer\n")))}d.isMDXComponent=!0}}]);