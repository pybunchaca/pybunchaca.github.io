"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6021],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>d,mdx:()=>m,useMDXComponents:()=>p,withMDXComponents:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){return function(t){var n=p(t.components);return r.createElement(e,i({},t,{components:n}))}},p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(o,".").concat(d)]||c[d]||g[d]||i;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={},o="Longest Substring",s={unversionedId:"algorithms-and-data-structures/array-and-string/longest-substring",id:"algorithms-and-data-structures/array-and-string/longest-substring",title:"Longest Substring",description:"Longest Substring Without Repeating Characters",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/001-longest-substring.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/longest-substring",permalink:"/docs/algorithms-and-data-structures/array-and-string/longest-substring",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Array - String - Hashing",permalink:"/docs/category/array---string---hashing"},next:{title:"Contains Duplicate",permalink:"/docs/algorithms-and-data-structures/array-and-string/contains-duplicate"}},l={},u=[{value:"Longest Substring Without Repeating Characters",id:"longest-substring-without-repeating-characters",level:2},{value:"Description",id:"description",level:3},{value:"Reason",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.default)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"longest-substring"},"Longest Substring"),(0,a.mdx)("h2",{id:"longest-substring-without-repeating-characters"},"Longest Substring Without Repeating Characters"),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given a string, find the length of the ",(0,a.mdx)("strong",{parentName:"p"},"longest substring")," without repeating\n",(0,a.mdx)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/"},"Leetcode")),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"})),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'Input: "abcabcbb"\nOutput: 3\nExplanation: The answer is "abc", with the length of 3.\n')),(0,a.mdx)("ol",{start:2},(0,a.mdx)("li",{parentName:"ol"})),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'Input: s = "pwwkew"\nOutput: 3\nExplanation: The answer is "wke", with the length of 3.\nNotice that the answer must be a substring, "pwke" is a subsequence and not a substring.\n')),(0,a.mdx)("h3",{id:"reason"},"Reason"),(0,a.mdx)("p",null,"This question asks about the length of a substring given conditions. We can think of it like the length of a sub-array inside an array. You can imagine there is a ",(0,a.mdx)("strong",{parentName:"p"},"sliding window")," moving around the array and we need to calculate results based on some special conditions."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Note"),": the special case is that when we see a duplicate that inside the window (meaning the index of the duplicate is greater than ",(0,a.mdx)("inlineCode",{parentName:"p"},"left_pointer"),"), then ",(0,a.mdx)("inlineCode",{parentName:"p"},"left_pointer = seen_chars[current_char] + 1")),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/347818/python3-sliding-window-o-n-with-explanation/"},"Reference")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"def length_longest_substrig(input_str: str) -> int:\n    seen_chars = dict()\n    left_pointer = 0\n    longest_length = 0 # keep track of the longest length of substring without duplicates\n\n    # We move the right_pointer to the right until we see a duplicate in unique_char\n    for right_pointer in range(len(input_str)):\n        current_char = input_str[right_pointer]\n        if current_char in seen_chars:\n            left_pointer = max(left_pointer, seen_chars[current_char] + 1)\n        longest_length = max(longest_length, right_pointer - left_pointer + 1)\n        seen_chars[current_char] = right_pointer\n\n    return longest_length\n")))}p.isMDXComponent=!0}}]);