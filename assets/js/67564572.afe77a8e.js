"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4332],{3905:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>d,withMDXComponents:()=>c});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(){return o=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},o.apply(this,arguments)}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),c=function(e){return function(r){var t=d(r.components);return n.createElement(e,o({},r,{components:t}))}},d=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=d(e.components);return n.createElement(u.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),p=a,f=c["".concat(i,".").concat(p)]||c[p]||m[p]||o;return t?n.createElement(f,l(l({ref:r},u),{},{components:t})):n.createElement(f,l({ref:r},u))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5189:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=t(7462),a=(t(7294),t(3905));const o={},i="Valid Anagram",l={unversionedId:"algorithms-and-data-structures/array-and-string/valid-anagram",id:"algorithms-and-data-structures/array-and-string/valid-anagram",title:"Valid Anagram",description:"Leetcode",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/003-valid-anagram.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/valid-anagram",permalink:"/docs/algorithms-and-data-structures/array-and-string/valid-anagram",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Contains Duplicate",permalink:"/docs/algorithms-and-data-structures/array-and-string/contains-duplicate"},next:{title:"Roman to Integer",permalink:"/docs/algorithms-and-data-structures/array-and-string/roman-to-integer"}},s={},u=[{value:"Description",id:"description",level:3},{value:"Reason",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],c={toc:u};function d(e){let{components:r,...t}=e;return(0,a.mdx)("wrapper",(0,n.default)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"valid-anagram"},"Valid Anagram"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://leetcode.com/problems/valid-anagram/description/"},"Leetcode")),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given two strings ",(0,a.mdx)("inlineCode",{parentName:"p"},"s")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"t"),", return true if ",(0,a.mdx)("inlineCode",{parentName:"p"},"t")," is an anagram of ",(0,a.mdx)("inlineCode",{parentName:"p"},"s"),", and false otherwise."),(0,a.mdx)("p",null,"An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."),(0,a.mdx)("p",null,"Example 1:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'Input: s = "anagram", t = "nagaram"\nOutput: true\n')),(0,a.mdx)("p",null,"Example 2:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'Input: s = "rat", t = "car"\nOutput: false\n')),(0,a.mdx)("h3",{id:"reason"},"Reason"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Count frequency of all characters in each string and put it into a dict"),(0,a.mdx)("li",{parentName:"ul"},"Loop through each key of frequency dictionary of string ",(0,a.mdx)("inlineCode",{parentName:"li"},"t"),", if the key is not in ",(0,a.mdx)("inlineCode",{parentName:"li"},"s")," freq dict or the values of the key in both dict are different --\x3e return False"),(0,a.mdx)("li",{parentName:"ul"},"Otherwise, return True")),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"\ndef count_freq(s: str):\n    count_freq = dict()\n    for char in s:\n        count_freq[char] = count_freq.get(char, 0) + 1\n    return count_freq\n\ndef is_anagram(self, s: str, t: str) -> bool:\n    if len(s) != len(t):\n        return False\n\n    count_freq_s = count_freq(s)\n    count_freq_t = count_freq(t)\n\n    for key_t in count_freq_t:\n        if key_t not in count_freq_s:\n            return False\n        elif count_freq_t[key_t] != count_freq_s[key_t]:\n            return False\n    return True\n\n")))}d.isMDXComponent=!0}}]);