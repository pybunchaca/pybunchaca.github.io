"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1351],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>u,MDXProvider:()=>d,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),m=function(e){return function(n){var t=p(n.components);return r.createElement(e,o({},n,{components:t}))}},p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(i,".").concat(d)]||m[d]||c[d]||o;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4602:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={tags:["array","medium","facebook","amazon","apple","google","adobe","bloomberg"]},i="3Sum",l={unversionedId:"algorithms-and-data-structures/array-and-string/007-3sum",id:"algorithms-and-data-structures/array-and-string/007-3sum",title:"3Sum",description:"Description",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/007-3sum.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/007-3sum",permalink:"/docs/algorithms-and-data-structures/array-and-string/007-3sum",draft:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"medium",permalink:"/docs/tags/medium"},{label:"facebook",permalink:"/docs/tags/facebook"},{label:"amazon",permalink:"/docs/tags/amazon"},{label:"apple",permalink:"/docs/tags/apple"},{label:"google",permalink:"/docs/tags/google"},{label:"adobe",permalink:"/docs/tags/adobe"},{label:"bloomberg",permalink:"/docs/tags/bloomberg"}],version:"current",frontMatter:{tags:["array","medium","facebook","amazon","apple","google","adobe","bloomberg"]},sidebar:"tutorialSidebar",previous:{title:"Two Sum II",permalink:"/docs/algorithms-and-data-structures/array-and-string/two-sum-II"}},s={},u=[{value:"Description",id:"description",level:3},{value:"Reason",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],m={toc:u};function p(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,r.default)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"3sum"},"3Sum"),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given an integer array nums, return all the triplets ",(0,a.mdx)("inlineCode",{parentName:"p"},"[nums[i], nums[j], nums[k]]")," such that ",(0,a.mdx)("inlineCode",{parentName:"p"},"i != j"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"i != k"),", and ",(0,a.mdx)("inlineCode",{parentName:"p"},"j != k"),", and ",(0,a.mdx)("inlineCode",{parentName:"p"},"nums[i] + nums[j] + nums[k] == 0"),"."),(0,a.mdx)("p",null,"Notice that the solution set must not contain duplicate triplets."),(0,a.mdx)("p",null,"Example 1:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation:\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n")),(0,a.mdx)("p",null,"Example 2:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n")),(0,a.mdx)("p",null,"Example 3:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n")),(0,a.mdx)("p",null,"Constraints:"),(0,a.mdx)("p",null,"3 <= nums.length <= 3000\n-105 <= nums","[i]"," <= 105"),(0,a.mdx)("h3",{id:"reason"},"Reason"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Follow the two pointers pattern in ",(0,a.mdx)("inlineCode",{parentName:"li"},"Two Sum II")),(0,a.mdx)("li",{parentName:"ul"},"Sort the array"),(0,a.mdx)("li",{parentName:"ul"},"Only get unique triplets --\x3e meaning no similar triplets")),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums = sorted(nums)\n        triplets = []\n\n        for i in range(len(nums)-2):\n            if nums[i] > 0:\n                break\n\n            first = nums[i]\n            left_pointer = i + 1\n            right_pointer = len(nums) - 1\n\n            while left_pointer < right_pointer:\n\n                second = nums[left_pointer]\n                third = nums[right_pointer]\n\n                curr_sum = first + second + third\n\n                if curr_sum > 0:\n                    right_pointer -= 1\n                elif curr_sum < 0:\n                    left_pointer += 1\n                else:\n                    new_triplet = [first, second, third]\n                    if new_triplet not in triplets:\n                        triplets.append([first, second, third])\n                    left_pointer += 1\n                    right_pointer -= 1\n\n        return triplets\n")))}p.isMDXComponent=!0}}]);