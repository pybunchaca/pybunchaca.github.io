"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1240],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),m=function(e){return function(t){var n=p(t.components);return r.createElement(e,o({},t,{components:n}))}},p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,g=m["".concat(l,".").concat(c)]||m[c]||d[c]||o;return n?r.createElement(g,s(s({ref:t},u),{},{components:n})):r.createElement(g,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=g;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4066:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={tags:["array","easy","facebook","amazon","apple","google","adobe","bloomberg","microsoft","spotify"]},l="Two Sum",s={unversionedId:"algorithms-and-data-structures/array-and-string/two-sum",id:"algorithms-and-data-structures/array-and-string/two-sum",title:"Two Sum",description:"Description",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/005-two-sum.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/two-sum",permalink:"/docs/algorithms-and-data-structures/array-and-string/two-sum",draft:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"easy",permalink:"/docs/tags/easy"},{label:"facebook",permalink:"/docs/tags/facebook"},{label:"amazon",permalink:"/docs/tags/amazon"},{label:"apple",permalink:"/docs/tags/apple"},{label:"google",permalink:"/docs/tags/google"},{label:"adobe",permalink:"/docs/tags/adobe"},{label:"bloomberg",permalink:"/docs/tags/bloomberg"},{label:"microsoft",permalink:"/docs/tags/microsoft"},{label:"spotify",permalink:"/docs/tags/spotify"}],version:"current",sidebarPosition:5,frontMatter:{tags:["array","easy","facebook","amazon","apple","google","adobe","bloomberg","microsoft","spotify"]},sidebar:"tutorialSidebar",previous:{title:"Roman to Integer",permalink:"/docs/algorithms-and-data-structures/array-and-string/roman-to-integer"}},i={},u=[{value:"Description",id:"description",level:3},{value:"Reason",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.default)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"two-sum"},"Two Sum"),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."),(0,a.mdx)("p",null,"You may assume that each input would have exactly one solution, and you may not use the same element twice."),(0,a.mdx)("p",null,"You can return the answer in any order."),(0,a.mdx)("p",null,"Example 1:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n")),(0,a.mdx)("p",null,"Example 2:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n")),(0,a.mdx)("p",null,"Example 3:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: nums = [3,3], target = 6\nOutput: [0,1]\n")),(0,a.mdx)("p",null,"Constraints:"),(0,a.mdx)("p",null,"2 <= nums.length <= 104\n-109 <= nums","[i]"," <= 109\n-109 <= target <= 109\nOnly one valid answer exists."),(0,a.mdx)("p",null,"Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?"),(0,a.mdx)("h3",{id:"reason"},"Reason"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"An algorithm that is less than O(n2): we can use two pointers"),(0,a.mdx)("li",{parentName:"ul"},"Sort the array first"),(0,a.mdx)("li",{parentName:"ul"},"Then loop left and right pointer"),(0,a.mdx)("li",{parentName:"ul"},"Note: if the right pointer is larger than the target, we move the right")),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n\n        num_to_index = {}\n        for i, num in enumerate(nums):\n            complement = target - num\n            if complement in num_to_index:\n                return [num_to_index[complement], i]\n            num_to_index[num] = i\n\n        return []\n")))}p.isMDXComponent=!0}}]);