"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3966],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},o.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),d=function(e){return function(t){var r=m(t.components);return n.createElement(e,o({},t,{components:r}))}},m=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=m(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=m(r),p=a,f=d["".concat(i,".").concat(p)]||d[p]||c[p]||o;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},706:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={tags:["array","medium","facebook","amazon","apple","adobe","bloomberg","microsoft","uber"]},i="Two Sum II",s={unversionedId:"algorithms-and-data-structures/array-and-string/two-sum-II",id:"algorithms-and-data-structures/array-and-string/two-sum-II",title:"Two Sum II",description:"Input array is sorted",source:"@site/docs/03-algorithms-and-data-structures/01-array-and-string/006-two-sum-II.md",sourceDirName:"03-algorithms-and-data-structures/01-array-and-string",slug:"/algorithms-and-data-structures/array-and-string/two-sum-II",permalink:"/docs/algorithms-and-data-structures/array-and-string/two-sum-II",draft:!1,tags:[{label:"array",permalink:"/docs/tags/array"},{label:"medium",permalink:"/docs/tags/medium"},{label:"facebook",permalink:"/docs/tags/facebook"},{label:"amazon",permalink:"/docs/tags/amazon"},{label:"apple",permalink:"/docs/tags/apple"},{label:"adobe",permalink:"/docs/tags/adobe"},{label:"bloomberg",permalink:"/docs/tags/bloomberg"},{label:"microsoft",permalink:"/docs/tags/microsoft"},{label:"uber",permalink:"/docs/tags/uber"}],version:"current",sidebarPosition:6,frontMatter:{tags:["array","medium","facebook","amazon","apple","adobe","bloomberg","microsoft","uber"]},sidebar:"tutorialSidebar",previous:{title:"Two Sum",permalink:"/docs/algorithms-and-data-structures/array-and-string/two-sum"},next:{title:"3Sum",permalink:"/docs/algorithms-and-data-structures/array-and-string/007-3sum"}},l={},u=[{value:"Description",id:"description",level:3},{value:"Reason",id:"reason",level:3},{value:"Solution",id:"solution",level:3}],d={toc:u};function m(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.default)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"two-sum-ii"},"Two Sum II"),(0,a.mdx)("p",null,"Input array is sorted"),(0,a.mdx)("h3",{id:"description"},"Description"),(0,a.mdx)("p",null,"Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers","[index1]"," and numbers","[index2]"," where 1 <= index1 < index2 < numbers.length."),(0,a.mdx)("p",null,"Return the indices of the two numbers, index1 and index2, added by one as an integer array ","[index1, index2]"," of length 2."),(0,a.mdx)("p",null,"The tests are generated such that there is exactly one solution. You may not use the same element twice."),(0,a.mdx)("p",null,"Your solution must use only constant extra space."),(0,a.mdx)("p",null,"Example 1:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n")),(0,a.mdx)("p",null,"Example 2:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n")),(0,a.mdx)("p",null,"Example 3:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"Input: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n")),(0,a.mdx)("p",null,"Constraints:"),(0,a.mdx)("p",null,"2 <= numbers.length <= 3 ","*"," 104\n-1000 <= numbers","[i]"," <= 1000\nnumbers is sorted in non-decreasing order.\n-1000 <= target <= 1000\nThe tests are generated such that there is exactly one solution."),(0,a.mdx)("h3",{id:"reason"},"Reason"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Use two pointers: left and right"),(0,a.mdx)("li",{parentName:"ul"},"Take advantage of the sorted array"),(0,a.mdx)("li",{parentName:"ul"},"The right pointer moves backward"),(0,a.mdx)("li",{parentName:"ul"},"If the left + the right > target --\x3e we need to move the right pointer to the left, and vice versa"),(0,a.mdx)("li",{parentName:"ul"},"NOTE: this is 1-indexed array --\x3e array starting point is ",(0,a.mdx)("inlineCode",{parentName:"li"},"1"))),(0,a.mdx)("h3",{id:"solution"},"Solution"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},"class Solution:\n    def twoSumII(self, numbers: List[int], target: int) -> List[int]:\n        left_pointer = 0\n        right_pointer = len(numbers)-1\n        while left_pointer < right_pointer:\n            total = numbers[left_pointer] + numbers[right_pointer]\n            if total > target:\n                right_pointer -= 1\n            elif total < target:\n                left_pointer += 1\n            else:\n                return [left_pointer + 1, right_pointer + 1]\n        return []\n")))}m.isMDXComponent=!0}}]);